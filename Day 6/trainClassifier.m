function [trainedClassifier, validationAccuracy] = trainClassifier(trainData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 09-Jun-2020 12:55:22


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainData;
predictorNames = {'FEAT_ch1_mpv', 'FEAT_ch1_mmav1', 'FEAT_ch1_absmean', 'FEAT_ch1_rms', 'FEAT_ch1_var', 'FEAT_ch1_bp2t20', 'FEAT_ch1_bp20t40', 'FEAT_ch1_bp40t56', 'FEAT_ch1_bp64t110', 'FEAT_ch2_mpv', 'FEAT_ch2_mmav1', 'FEAT_ch2_absmean', 'FEAT_ch2_rms', 'FEAT_ch2_var', 'FEAT_ch2_bp2t20', 'FEAT_ch2_bp20t40', 'FEAT_ch2_bp40t56', 'FEAT_ch2_bp64t110'};
predictors = inputTable(:, predictorNames);
response = inputTable.labels;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Data transformation: Select subset of the features
% This code selects the same subset of features as were used in the app.
includedPredictorNames = predictors.Properties.VariableNames([true false false false false false true false false false false true false false false false false false]);
predictors = predictors(:,includedPredictorNames);
isCategoricalPredictor = isCategoricalPredictor([true false false false false false true false false false false true false false false false false false]);

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationSVM = fitcsvm(...
    predictors, ...
    response, ...
    'KernelFunction', 'linear', ...
    'PolynomialOrder', [], ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true, ...
    'ClassNames', categorical({'A pressed'; 'S pressed'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
featureSelectionFcn = @(x) x(:,includedPredictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(featureSelectionFcn(predictorExtractionFcn(x)));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'FEAT_ch1_absmean', 'FEAT_ch1_bp20t40', 'FEAT_ch1_bp2t20', 'FEAT_ch1_bp40t56', 'FEAT_ch1_bp64t110', 'FEAT_ch1_mmav1', 'FEAT_ch1_mpv', 'FEAT_ch1_rms', 'FEAT_ch1_var', 'FEAT_ch2_absmean', 'FEAT_ch2_bp20t40', 'FEAT_ch2_bp2t20', 'FEAT_ch2_bp40t56', 'FEAT_ch2_bp64t110', 'FEAT_ch2_mmav1', 'FEAT_ch2_mpv', 'FEAT_ch2_rms', 'FEAT_ch2_var'};
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2019a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainData;
predictorNames = {'FEAT_ch1_mpv', 'FEAT_ch1_mmav1', 'FEAT_ch1_absmean', 'FEAT_ch1_rms', 'FEAT_ch1_var', 'FEAT_ch1_bp2t20', 'FEAT_ch1_bp20t40', 'FEAT_ch1_bp40t56', 'FEAT_ch1_bp64t110', 'FEAT_ch2_mpv', 'FEAT_ch2_mmav1', 'FEAT_ch2_absmean', 'FEAT_ch2_rms', 'FEAT_ch2_var', 'FEAT_ch2_bp2t20', 'FEAT_ch2_bp20t40', 'FEAT_ch2_bp40t56', 'FEAT_ch2_bp64t110'};
predictors = inputTable(:, predictorNames);
response = inputTable.labels;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
